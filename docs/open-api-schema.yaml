openapi: 3.0.3
info:
  title: Polling app project API
  version: 1.0.0
  description: It is API for polling app
paths:
  /api/v1/questions:
    get:
      operationId: api_v1_questions_list
      summary: Get list of questions
      tags:
      - Question
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
          description: ''
    post:
      operationId: api_v1_questions_create
      summary: Create question
      tags:
      - Question
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Question'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
  /api/v1/questions/{id}:
    get:
      operationId: api_v1_questions_retrieve
      summary: Get question
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - Question
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    delete:
      operationId: api_v1_questions_destroy
      summary: Delete question
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - Question
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/questions/{id}/is-already-vote:
    get:
      operationId: api_v1_questions_is_already_vote_retrieve
      description: Check if the current user vote on question=id
      summary: Check whether you have already vote
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - Question
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsAlreadyVoteAnswer'
          description: ''
  /api/v1/questions/{question_pk}/answers/{id}:
    get:
      operationId: api_v1_questions_answers_retrieve
      summary: Get answer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      - in: path
        name: question_pk
        schema:
          type: integer
        required: true
      tags:
      - Answer
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
          description: ''
  /api/v1/questions/{question_pk}/answers/{id}/vote:
    patch:
      operationId: api_v1_questions_answers_vote_partial_update
      description: Votes for answer=id in question=question_pk
      summary: Vote for answer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      - in: path
        name: question_pk
        schema:
          type: integer
        required: true
      tags:
      - Answer
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteAnswer'
              examples:
                SuccessfulVote:
                  value:
                    message: Thank you for your vote
                  summary: Successful vote
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteAnswer'
              examples:
                YouCan'tVote:
                  value:
                    message: You have already vote on this question
                  summary: You can't vote
          description: ''
  /api/v1/token:
    post:
      operationId: api_v1_token_create
      summary: "Login and get token"
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/token/refresh:
    post:
      operationId: api_v1_token_refresh_create
      summary: "Refresh token"
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/users:
    get:
      operationId: api_v1_users_list
      description: Only stuff can see all users
      summary: Get list of users
      tags:
      - User
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: api_v1_users_create
      summary: Register user
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/v1/users/{username}:
    get:
      operationId: api_v1_users_retrieve
      summary: Get user
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - User
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '404':
            description: Not found
    delete:
      operationId: api_v1_users_destroy
      summary: Delete user
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - User
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '404':
          description: Not found
    head:
      operationId: api_v1_users_existence
      summary:  Check user existence
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      tags:
        - User
      responses: 
        '200': 
          description: User exists. No response body
        '404':
          description: This user doesn't exist. No response body
      
components:
  schemas:
    Answer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        answer_text:
          type: string
          maxLength: 200
        votes:
          type: integer
          readOnly: true
      required:
      - answer_text
      - id
      - votes
    IsAlreadyVoteAnswer:
      type: object
      properties:
        is-already-vote:
          type: boolean
      required:
      - is-already-vote
    Question:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: integer
        author_username:
          type: string
          readOnly: true
        question_text:
          type: string
          maxLength: 200
        pub_date:
          type: string
          format: date-time
          readOnly: true
          title: Date published
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
      required:
      - answers
      - author
      - author_username
      - id
      - pub_date
      - question_text
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        password:
          type: string
          writeOnly: true
          maxLength: 128
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - id
      - password
      - username
    VoteAnswer:
      type: object
      properties:
        message:
          type: string
      required:
      - message
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
